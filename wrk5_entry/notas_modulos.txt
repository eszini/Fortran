En Fortran, cuando defines un módulo y declaras variables en él, esas variables se comportan de manera similar a variables globales en otros lenguajes de programación. Aquí hay algunas razones y explicaciones sobre por qué esto funciona de esta manera y por qué no necesitas declaraciones adicionales como `static` o `save`:

### Módulos y Visibilidad en Fortran

1. **Encapsulamiento en Módulos**:
   - Los módulos en Fortran están diseñados para encapsular datos y procedimientos que pueden ser compartidos entre diferentes partes del programa.
   - Cuando defines una variable en un módulo, esa variable es accesible para cualquier programa o subrutina que use ese módulo.

2. **Declaración de Uso (`USE`)**:
   - La declaración `USE` se utiliza para acceder al contenido de un módulo. Cuando un programa o subrutina incluye la declaración `USE module_name`, todas las variables y procedimientos públicos del módulo se vuelven accesibles en ese ámbito.

3. **Persistencia Implícita**:
   - Las variables en un módulo tienen persistencia implícita. Esto significa que mantienen su valor durante la ejecución del programa y no es necesario declararlas con `SAVE` para este comportamiento.
   - En Fortran, las variables del módulo son estáticas por defecto. Esto es diferente a las variables locales en subrutinas o funciones, que pierden su valor al salir del ámbito a menos que se declaren con `SAVE`.

### Ejemplo de Módulo

```fortran
module my_module
    implicit none
    integer :: global_var = 0  ! Esta variable es visible para cualquier programa que use este módulo
    real :: shared_data(100)   ! Este array también es compartido
end module my_module
```

### Uso del Módulo en un Programa

```fortran
program main_program
    use my_module
    implicit none
    ! Ahora se puede acceder a global_var y shared_data aquí
    global_var = 10
    shared_data(1) = 3.14
    print *, global_var
    print *, shared_data(1)
end program main_program
```

### Resumen

- **Visibilidad**: Las variables declaradas en un módulo son visibles para cualquier programa o subrutina que use ese módulo mediante la declaración `USE`.
- **Persistencia**: Las variables del módulo tienen persistencia implícita durante la ejecución del programa, lo que significa que retienen su valor.
- **No se necesita `SAVE`**: A diferencia de las variables locales en subrutinas y funciones, las variables del módulo no requieren la declaración `SAVE` para mantener su valor.

Esta característica de los módulos en Fortran simplifica la gestión de variables compartidas y la organización del código, facilitando la reutilización y el mantenimiento.:
